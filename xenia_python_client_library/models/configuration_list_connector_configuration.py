# coding: utf-8

"""
    Xenia Python Client Library

    Python Client Library to interact with the Xenia API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from xenia_python_client_library.configuration import Configuration


class ConfigurationListConnectorConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parameter': 'str',
        'name': 'str',
        'description': 'str',
        'input_field': 'str',
        'default': 'str',
        'protected': 'str',
        'regex': 'str'
    }

    attribute_map = {
        'parameter': 'parameter',
        'name': 'name',
        'description': 'description',
        'input_field': 'input_field',
        'default': 'default',
        'protected': 'protected',
        'regex': 'regex'
    }

    def __init__(self, parameter=None, name=None, description=None, input_field=None, default=None, protected=None, regex=None, local_vars_configuration=None):  # noqa: E501
        """ConfigurationListConnectorConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parameter = None
        self._name = None
        self._description = None
        self._input_field = None
        self._default = None
        self._protected = None
        self._regex = None
        self.discriminator = None

        if parameter is not None:
            self.parameter = parameter
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if input_field is not None:
            self.input_field = input_field
        if default is not None:
            self.default = default
        if protected is not None:
            self.protected = protected
        if regex is not None:
            self.regex = regex

    @property
    def parameter(self):
        """Gets the parameter of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The parameter of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ConfigurationListConnectorConfiguration.


        :param parameter: The parameter of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def name(self):
        """Gets the name of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The name of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigurationListConnectorConfiguration.


        :param name: The name of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The description of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConfigurationListConnectorConfiguration.


        :param description: The description of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def input_field(self):
        """Gets the input_field of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The input_field of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._input_field

    @input_field.setter
    def input_field(self, input_field):
        """Sets the input_field of this ConfigurationListConnectorConfiguration.


        :param input_field: The input_field of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._input_field = input_field

    @property
    def default(self):
        """Gets the default of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The default of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ConfigurationListConnectorConfiguration.


        :param default: The default of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._default = default

    @property
    def protected(self):
        """Gets the protected of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The protected of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protected

    @protected.setter
    def protected(self, protected):
        """Sets the protected of this ConfigurationListConnectorConfiguration.


        :param protected: The protected of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._protected = protected

    @property
    def regex(self):
        """Gets the regex of this ConfigurationListConnectorConfiguration.  # noqa: E501


        :return: The regex of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this ConfigurationListConnectorConfiguration.


        :param regex: The regex of this ConfigurationListConnectorConfiguration.  # noqa: E501
        :type: str
        """

        self._regex = regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationListConnectorConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigurationListConnectorConfiguration):
            return True

        return self.to_dict() != other.to_dict()
