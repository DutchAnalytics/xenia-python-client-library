# coding: utf-8

"""
    Xenia Python Client Library

    Python Client Library to interact with the Xenia API.  # noqa: E501

    The version of the OpenAPI document: v1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from xenia_python_client_library.configuration import Configuration


class LogsCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'log_objects': 'dict(str, str)',
        'date': 'str',
        'range': 'int',
        'object_id': 'str'
    }

    attribute_map = {
        'log_objects': 'log_objects',
        'date': 'date',
        'range': 'range',
        'object_id': 'object_id'
    }

    def __init__(self, log_objects=None, date=None, range=None, object_id=None, local_vars_configuration=None):  # noqa: E501
        """LogsCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._log_objects = None
        self._date = None
        self._range = None
        self._object_id = None
        self.discriminator = None

        self.log_objects = log_objects
        if date is not None:
            self.date = date
        if range is not None:
            self.range = range
        if object_id is not None:
            self.object_id = object_id

    @property
    def log_objects(self):
        """Gets the log_objects of this LogsCreate.  # noqa: E501


        :return: The log_objects of this LogsCreate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._log_objects

    @log_objects.setter
    def log_objects(self, log_objects):
        """Sets the log_objects of this LogsCreate.


        :param log_objects: The log_objects of this LogsCreate.  # noqa: E501
        :type: dict(str, str)
        """
        if self.local_vars_configuration.client_side_validation and log_objects is None:  # noqa: E501
            raise ValueError("Invalid value for `log_objects`, must not be `None`")  # noqa: E501

        self._log_objects = log_objects

    @property
    def date(self):
        """Gets the date of this LogsCreate.  # noqa: E501


        :return: The date of this LogsCreate.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this LogsCreate.


        :param date: The date of this LogsCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                date is not None and len(date) < 1):
            raise ValueError("Invalid value for `date`, length must be greater than or equal to `1`")  # noqa: E501

        self._date = date

    @property
    def range(self):
        """Gets the range of this LogsCreate.  # noqa: E501


        :return: The range of this LogsCreate.  # noqa: E501
        :rtype: int
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this LogsCreate.


        :param range: The range of this LogsCreate.  # noqa: E501
        :type: int
        """

        self._range = range

    @property
    def object_id(self):
        """Gets the object_id of this LogsCreate.  # noqa: E501


        :return: The object_id of this LogsCreate.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this LogsCreate.


        :param object_id: The object_id of this LogsCreate.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                object_id is not None and len(object_id) < 1):
            raise ValueError("Invalid value for `object_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._object_id = object_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogsCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogsCreate):
            return True

        return self.to_dict() != other.to_dict()
