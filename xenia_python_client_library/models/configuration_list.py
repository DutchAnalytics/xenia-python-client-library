# coding: utf-8

"""
    Xenia Python Client Library

    Python Client Library to interact with the Xenia API.  # noqa: E501

    The version of the OpenAPI document: v2.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from xenia_python_client_library.configuration import Configuration


class ConfigurationList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connector': 'str',
        'connector_type': 'str',
        'connector_configuration': 'list[ConfigurationListConnectorConfiguration]'
    }

    attribute_map = {
        'connector': 'connector',
        'connector_type': 'connector_type',
        'connector_configuration': 'connector_configuration'
    }

    def __init__(self, connector=None, connector_type=None, connector_configuration=None, local_vars_configuration=None):  # noqa: E501
        """ConfigurationList - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connector = None
        self._connector_type = None
        self._connector_configuration = None
        self.discriminator = None

        self.connector = connector
        self.connector_type = connector_type
        self.connector_configuration = connector_configuration

    @property
    def connector(self):
        """Gets the connector of this ConfigurationList.  # noqa: E501


        :return: The connector of this ConfigurationList.  # noqa: E501
        :rtype: str
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this ConfigurationList.


        :param connector: The connector of this ConfigurationList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector is None:  # noqa: E501
            raise ValueError("Invalid value for `connector`, must not be `None`")  # noqa: E501

        self._connector = connector

    @property
    def connector_type(self):
        """Gets the connector_type of this ConfigurationList.  # noqa: E501


        :return: The connector_type of this ConfigurationList.  # noqa: E501
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ConfigurationList.


        :param connector_type: The connector_type of this ConfigurationList.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and connector_type is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_type`, must not be `None`")  # noqa: E501

        self._connector_type = connector_type

    @property
    def connector_configuration(self):
        """Gets the connector_configuration of this ConfigurationList.  # noqa: E501


        :return: The connector_configuration of this ConfigurationList.  # noqa: E501
        :rtype: list[ConfigurationListConnectorConfiguration]
        """
        return self._connector_configuration

    @connector_configuration.setter
    def connector_configuration(self, connector_configuration):
        """Sets the connector_configuration of this ConfigurationList.


        :param connector_configuration: The connector_configuration of this ConfigurationList.  # noqa: E501
        :type: list[ConfigurationListConnectorConfiguration]
        """
        if self.local_vars_configuration.client_side_validation and connector_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `connector_configuration`, must not be `None`")  # noqa: E501

        self._connector_configuration = connector_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigurationList):
            return True

        return self.to_dict() != other.to_dict()
